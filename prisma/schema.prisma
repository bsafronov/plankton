// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
enum FieldType {
    STRING
    NUMBER
    BOOLEAN
    ENUM
}

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                Int     @id @default(autoincrement())
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId            Int

    @@unique([provider, providerAccountId])
}

model Session {
    id           Int      @id @default(autoincrement())
    sessionToken String   @unique
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId       Int
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model User {
    id            Int          @id @default(autoincrement())
    name          String?
    email         String?      @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    departments   Department[]
    positions     Position[]
}

model Department {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    users  User[]
    stages ProcessTemplateStage[]
}

model Position {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    users  User[]
    stages ProcessTemplateStage[]
}

model Enum {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    items  EnumItem[]
    fields ProcessTemplateField[]
}

model EnumItem {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    enum   Enum @relation(fields: [enumId], references: [id])
    enumId Int
}

model ProcessTemplate {
    id         Int      @id @default(autoincrement())
    name       String
    isArchived Boolean  @default(false)
    createdAt  DateTime @default(now())
    updatedAt  DateTime @default(now()) @updatedAt

    startStage   ProcessTemplateStage? @relation("startStage", fields: [startStageId], references: [id])
    startStageId Int?                  @unique

    endStage   ProcessTemplateStage? @relation("endStage", fields: [endStageId], references: [id])
    endStageId Int?                  @unique

    stages    ProcessTemplateStage[]
    fields    ProcessTemplateField[]
    processes Process[]
}

model ProcessTemplateField {
    id        Int       @id @default(autoincrement())
    name      String
    type      FieldType @default(STRING)
    createdAt DateTime  @default(now())
    updatedAt DateTime  @default(now()) @updatedAt

    enum   Enum? @relation(fields: [enumId], references: [id])
    enumId Int?

    template   ProcessTemplate @relation(fields: [templateId], references: [id])
    templateId Int

    stageFields   ProcessTemplateStageField[]
    processFields ProcessField[]
}

model ProcessTemplateStage {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    template   ProcessTemplate @relation(fields: [templateId], references: [id])
    templateId Int

    responsibleByPositions   Position[]
    responsibleByDepartments Department[]

    templateStart ProcessTemplate? @relation("startStage")
    templateEnd   ProcessTemplate? @relation("endStage")

    fields        ProcessTemplateStageField[]
    flowsFrom     ProcessTemplateStageFlow[]  @relation("flowsFrom")
    flowsTo       ProcessTemplateStageFlow[]  @relation("flowsTo")
    processStages ProcessStage[]
}

model ProcessTemplateStageField {
    id          Int      @id @default(autoincrement())
    name        String
    placeholder String?
    description String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @default(now()) @updatedAt

    templateField   ProcessTemplateField @relation(fields: [templateFieldId], references: [id])
    templateFieldId Int

    stage   ProcessTemplateStage @relation(fields: [stageId], references: [id])
    stageId Int

    flows              ProcessTemplateStageFlow[]
    processStageFields ProcessStageField[]
}

model ProcessTemplateStageFlow {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    fromStage   ProcessTemplateStage @relation("flowsFrom", fields: [fromStageId], references: [id])
    fromStageId Int

    toStage   ProcessTemplateStage @relation("flowsTo", fields: [toStageId], references: [id])
    toStageId Int

    stageField   ProcessTemplateStageField? @relation(fields: [stageFieldId], references: [id])
    stageFieldId Int?

    stageFieldValue String?
}

model Process {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    currentStage   ProcessStage @relation("currentStage", fields: [currentStageId], references: [id])
    currentStageId Int          @unique

    template   ProcessTemplate @relation(fields: [templateId], references: [id])
    templateId Int

    fields ProcessField[]
    stages ProcessStage[]
}

model ProcessField {
    id        Int      @id @default(autoincrement())
    value     String
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    templateField   ProcessTemplateField @relation(fields: [templateFieldId], references: [id])
    templateFieldId Int

    process   Process @relation(fields: [processId], references: [id], onDelete: Cascade)
    processId Int
}

model ProcessStage {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    templateStage   ProcessTemplateStage @relation(fields: [templateStageId], references: [id])
    templateStageId Int

    process   Process @relation(fields: [processId], references: [id], onDelete: Cascade)
    processId Int

    processCurrentStage Process? @relation("currentStage")

    ProcessStageField ProcessStageField[]
}

model ProcessStageField {
    id        Int      @id @default(autoincrement())
    value     String
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    templateStageField   ProcessTemplateStageField @relation(fields: [templateStageFieldId], references: [id])
    templateStageFieldId Int

    stage   ProcessStage @relation(fields: [stageId], references: [id])
    stageId Int
}
